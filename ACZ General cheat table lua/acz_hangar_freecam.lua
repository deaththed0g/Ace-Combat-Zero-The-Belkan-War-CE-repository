{$lua}

--[[
=================================================================
==== ACE COMBAT ZERO: THE BELKAN WAR - HANGAR FREECAM SCRIPT ====
=================================================================
By death_the_d0g (death_the_d0g @ Twitter and deaththed0g @ Github)
This script was written and is best viewed on Notepad++.
v241124

TODO:
-- REDO EVERYTHING
-- REDO EVERYTHING
-- REDO EVERYTHING
-- REDO EVERYTHING
-- REDO EVERYTHING

]]

setMethodProperty(getMainForm(), "OnCloseQuery", nil) -- Disable CE's save prompt.

[ENABLE]

if syntaxcheck then return end -- Prevent script from running after editing in CE's own script editor.

-------------------+
---- [G. VAR] -----+
-------------------+

IsAczFreecamHangarEnabled = nil
IsAczHangarLodEnabled = nil

---------------------+
---- [FUNCTIONS] ----+
---------------------+

-- Check current version and amount of active instances of PCSX2, set working RAM region.
local function pcsx2_version_check()

    version_id = nil
    pcsx2_id_ram_start = nil
    error_flag = nil
    local process_found = {}
	
    for processID, processName in pairs(getProcessList()) do
	
        if processName == "pcsx2.exe" or processName == "pcsx2-qt.exe" then
		
			process_found[#process_found + 1] = processName
			process_found[#process_found + 1] = processID
			
        end
		
    end
	
	if process_found[1] ~= nil then
	
		if (process_found[2] == getOpenedProcessID()) then
		
			if process_found[1] == "pcsx2.exe" then
			
				version_id = 1
				pcsx2_id_ram_start = getAddress(0x20000000)
				
				if readInteger(pcsx2_id_ram_start) == nil then
				
					error_flag = 3
					
				end
				
			elseif process_found[1] == "pcsx2-qt.exe" then
			
				version_id = 2
				pcsx2_id_ram_start = getAddress(readPointer("pcsx2-qt.EEmem"))
				
				if readInteger(pcsx2_id_ram_start) == 0 then
				
					error_flag = 3
					
				end
				
			end
			
		else
		
			error_flag = 2
			
		end
		
	else
	
		error_flag = 1
		
	end
	
    return {version_id, pcsx2_id_ram_start, error_flag}
	
end

-- Memory scanner
local function memscan_func(scanoption, vartype, roundingtype, input1, input2, startAddress, stopAddress, protectionflags, alignmenttype, alignmentparam, isHexadecimalInput, isNotABinaryString, isunicodescan, iscasesensitive)
	
	local memory_scan = createMemScan()
	memory_scan.firstScan(scanoption, vartype, roundingtype, input1, input2 ,startAddress ,stopAddress ,protectionflags ,alignmenttype, alignmentparam, isHexadecimalInput, isNotABinaryString, isunicodescan, iscasesensitive)
	memory_scan.waitTillDone()
	local found_list = createFoundList(memory_scan)
	found_list.initialize()
	local address_list = {}
	
	if (found_list ~= nil) then
		
		for i = 0, found_list.count - 1 do
			
			table.insert(address_list, getAddress(found_list[i]))
			
		end
		
	end
	
	found_list.deinitialize()
	found_list.destroy()
	found_list = nil
	
	return address_list
	
end

-- Create header 
local function create_header(header_name, header_appendtoentry, header_options)

	local header_memory_record_name = getAddressList().createMemoryRecord()
	header_memory_record_name.Description = header_name
	header_memory_record_name.isGroupHeader = true
	
	if header_appendtoentry ~= nil then
	
		header_memory_record_name.appendToEntry(header_appendtoentry)
		
	end
	
	if header_options then
		
		header_memory_record_name.options = "[moHideChildren, moAllowManualCollapseAndExpand, moManualExpandCollapse]"
		
	end
	
	return header_memory_record_name
	
end

-- Create memory record
local function create_memory_record(base_address, offset_list, vt_list, description_list, append_to_entry)

	for i = 1, #offset_list do
		
		local memory_record = getAddressList().createMemoryRecord()
		memory_record.Description = description_list[i]
		memory_record.setAddress(base_address + offset_list[i])
		
		if type(vt_list[i]) == "table" then
			
			if vt_list [i][1] == vtByteArray then
				
				memory_record.Type = vtByteArray
				memory_record.Aob.Size = vt_list[i][2]
				memory_record.ShowAsHex = true
				
			elseif vt_list [i][1] == vtString then
				
				memory_record.Type = vtString
				memory_record.String.Size = vt_list[i][2]
				
			end
			
		else
			
			memory_record.Type = vt_list[i]
			
		end
		
		memory_record.appendToEntry(append_to_entry)
		
	end
	
	return
	
end

-- "X item exists in Y table" check function
local function value_exists(tab, val)

	for index, value in ipairs(tab) do
	
		if value == val then
		
			return true
			
		end
		
	end
	
	return false
	
end

-- Restore default values
function restore(acz_hangar_freecam_address_list, acz_hangar_freecam_data_list, resetXZY, resetPYR, resetHNGRPOS, hasTheUserDisabledTheScript)
	
	-- Restore camera coordinates
	if resetXZY then
		
		writeBytes(acz_hangar_freecam_address_list[3], unpack(acz_hangar_freecam_data_list[3], 1, 4))
		writeBytes(acz_hangar_freecam_address_list[3] + 0x4, unpack(acz_hangar_freecam_data_list[3], 5, 8))
		writeBytes(acz_hangar_freecam_address_list[3] + 0x8, unpack(acz_hangar_freecam_data_list[3], 9, 12))
		
	end
	
	-- Restore camera pitch, yaw and roll values
	if resetPYR then
		
		writeBytes(acz_hangar_freecam_address_list[3] + 0x10, unpack(acz_hangar_freecam_data_list[3], 17, 20))
		writeBytes(acz_hangar_freecam_address_list[3] + 0x14, unpack(acz_hangar_freecam_data_list[3], 21, 24))
		writeBytes(acz_hangar_freecam_address_list[3] + 0x18, unpack(acz_hangar_freecam_data_list[3], 25, 28))
		
	end
	
	if resetHNGRPOS then
		
		-- Restore the default position for the aircraft in the current hangar.
		writeBytes(acz_hangar_freecam_address_list[4], acz_hangar_freecam_data_list[4])
		
		-- Restore default value of the placement type ID for the current hangar.
		writeBytes(acz_hangar_freecam_address_list[5], acz_hangar_freecam_data_list[5])
		
		-- Restore the default value of the aircraft rotation in the hangar when set to "placement type 3".
		writeBytes(acz_hangar_freecam_address_list[6], acz_hangar_freecam_data_list[6])
		
	end
	
	if hasTheUserDisabledTheScript then
		
		-- Set camera coordinates to the values saved after the script's activation.
		writeBytes(acz_hangar_freecam_address_list[3], acz_hangar_freecam_data_list[3])
		
		-- Restore the default position for the aircraft in the current hangar.
		writeBytes(acz_hangar_freecam_address_list[4], acz_hangar_freecam_data_list[4])
		
		-- Restore default value of the placement type ID for the current hangar.
		writeBytes(acz_hangar_freecam_address_list[5], acz_hangar_freecam_data_list[5])
		
		-- Restore the default value of the aircraft rotation in the hangar when set to "placement type 3".
		writeBytes(acz_hangar_freecam_address_list[6], acz_hangar_freecam_data_list[6])
		
		 -- Restore the default value of the flag that enables the ground reflection effect in the hangar
		writeBytes(acz_hangar_freecam_address_list[7], acz_hangar_freecam_data_list[7])
		
		-- Restore HUD graphics
		writeBytes(acz_hangar_freecam_address_list[1], acz_hangar_freecam_data_list[1])
		
		-- Restore controller input
		writeBytes(acz_hangar_freecam_address_list[2], acz_hangar_freecam_data_list[2])
		
	end
	
	return
	
end

------------------+
---- [TABLES] ----+
------------------+

local tbl = {}
acz_hangar_aob_address_list = {}
acz_hangar_aob_lod_data_list = {}
acz_hangar_freecam_address_list = {}
acz_hangar_freecam_data_list = {}

local bytearrays_to_search = {
"00 00 20 44 00 00 ?? 43 00 00 00 44 00 00 80 3F",
"00 00 CA 42 00 00 DC C2 00 00 A0 42 00 00 A0 42 00 00 9E 42 00 00 F0 C0 00 00 04 42 7F 7F 7F 7F 7F 7F 7F 7F 00 00 00 46 00 00 57 43 04 00 00 00 00 00 00 40 00 00 20 C1 00 00 F0 41 00 00 F0 C1 00 00 3E 43 00 00 02 43 00 00 0C 42 00 00 20 41 00 00 08 43 00 00 48 C3 00 00 B6 42 00 00 AA 42 00 00 A0 42 00 00 F0 C0 00 00 B6 42 7F 7F 7F 7F 7F 7F 7F 7F 00 00 40 46 00 00 07 43 04 00 00 00 00 00 00 40 00 00 82 43 00 00 F0 41 00 00 B4 C2 00 00 61 43 00 00 40 42 00 00 96 C2 00 00 20 41 00 00 0C 43 00 00 52 C3 00 00 B6 42 00 00 A4 42 00 00 A0 42 00 00 F0 C0 00 00 B6 42 7F 7F 7F 7F 7F 7F 7F 7F 00 00 00 46 00 00 61 43 04 00 00 00 00 00 00 40 00 80 93 C3 00 00 48 42 00 00 00 41 00 00 2F C3 00 00 C8 42 00 00 D2 C2 00 00 20 41 00 00 C8 42 33 33 47 C2 00 00 A0 42 00 00 9E 42 00 00 9C 42 00 00 F0 C0 00 00 E0 41 7F 7F 7F 7F 7F 7F 7F 7F 00 00 00 46 00 00 57 43 04 00 00 00 00 00 00 40 00 00 20 42 00 00 F0 41 00 00 F0 C1 00 00 70 43 00 00 02 43 00 00 0C 42 00 00 20 41",
}

-----------------+
---- [CHECK] ----+
-----------------+

-- Check if any of the "GAMEPLAY", "ADJUST THIRD PERSON CAMERA DISTANCE" or "FREE MOVEMENT MODE" scripts are active. If false continue with the next check.
if (not IsAczCamAdjustZEnabled) and (not IsAczFreecamGameplayEnabled) and (not IsAczFreeMoveEnabled) then
	
	-- Check how many instances of PCSX2 are running, the current version of the emulator and if it has a game loaded.
	-- Set the working RAM region ranges based on emulator version.
	AczFreecamHangar_pcsx2_id_ram_start = pcsx2_version_check()
	
	if (AczFreecamHangar_pcsx2_id_ram_start[3] == nil) then

		-- Check if the emulator has the right game loaded.
		local SLUS_21346_check = memscan_func(soExactValue, vtByteArray, nil, "18 B7 3D 00 88 44 3F 00 18 B7 3D 00 68 45 3F 00", nil, AczFreecamHangar_pcsx2_id_ram_start[2] + 0x300000, AczFreecamHangar_pcsx2_id_ram_start[2] + 0x5000000, "", 2, "0", true, nil, nil, nil)
		
		if #SLUS_21346_check ~= 0 then
			
			-- Check if the game has the [QUICK SELECTION] option enabled. If true, warn the player and exit script.
			if readBytes(AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3FDF2C, 1) ~= 1 then
				
				-- Check if the player is currently in any of the hangars available in the game.
				if value_exists({39, 40, 41, 42}, readBytes(AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3FDF2C, 1)) then
					
					-- Pause
					pause(getOpenedProcessID())
					
					-- look up the bytearrays needed by the script.
					for i = 1, #bytearrays_to_search do
						
						local found_list = memscan_func(soExactValue, vtByteArray, nil, bytearrays_to_search[i], nil, AczFreecamHangar_pcsx2_id_ram_start[2] + 0x800000, AczFreecamHangar_pcsx2_id_ram_start[2] + 0x1F00000, "", 2, "0", true, nil, nil, nil)
						tbl[#tbl + 1] = found_list[1]
					
					end
					
					-- If the search function returned the right amount of results then proceed with the rest of the script.
					if #tbl == 2 then
						
						-- Look for the bytes containing the opcodes that disable the camera movement then store then on a separate table with their addresses included.
						-- If something was found then set the activation flag and continue with the rest of the script
						
						-- For PCSX2-qt
						
						if AczFreecamHangar_pcsx2_id_ram_start[1] == 2 then
							
							local temp = memscan_func(soExactValue, vtByteArray, nilnil, AczFreecamHangar_pcsx2_id_ram_start[2] + 0x9B00000, AczFreecamHangar_pcsx2_id_ram_start[2] + 0xA300000, "", 0, "", true, nil, nil, nil)
							
							if #temp ~= 0 then
								
								for i = 1, #temp do
								
									acz_hangar_aob_address_list[#acz_hangar_aob_address_list + 1] = temp[i] + 0x326
									acz_hangar_aob_address_list[#acz_hangar_aob_address_list + 1] = temp[i] + 0x3DF
								
								end
								
								IsAczFreecamHangarEnabled = true
								
								-- Optional, if there's a SpW or a wingman in the hangar
								-- then look for the opcode that controls the LoD level of their models.
								
								if (readByte(tbl[1] + 0x1875) == 1 or readByte(tbl[1] + 0x1876) == 1 or readByte(tbl[1] + 0x1877) == 1) then
								
									local temp = memscan_func(soExactValue, vtByteArray, nilnil, AczFreecamHangar_pcsx2_id_ram_start[2] + 0x9B00000, AczFreecamHangar_pcsx2_id_ram_start[2] + 0xA300000, "", 0, "", true, nil, nil, nil)
								
									if #temp ~= 0 then
									
										for i = 1, #temp do
									
											acz_hangar_aob_lod_data_list[#acz_hangar_aob_lod_data_list + 1] = temp[i] + 0x3DF
									
										end
									
										IsAczHangarLodEnabled = true
								
									else
										
										aczhangar_errorMessage = "<< ERROR: LoD settings are not available. >>"
									
									end
								
								else
									
									aczhangar_errorMessage = "<< ERROR: no SpW or wingman detected. >>"
								
								end
							
								unpause(getOpenedProcessID())
							
							else
								
								if #temp == 0 or next(temp) == nil then
									
									showMessage("<< Unable to activate this script (acz_hangar_search_aob returned nil). >>")
									unpause(getOpenedProcessID())
								
								elseif #temp > 1 then
									
									showMessage("<< Unable to activate this script (acz_hangar_search_aob returned more than a result). >>")
									unpause(getOpenedProcessID())
								
								end
							
							end
					
						else
							
							-- For PCSX2 1.6
							-- Same as above, but different AoBs and addresses/ranges.
							
							local temp = memscan_func(soExactValue, vtByteArray, nil, "0F 28 02 0F 29 01 BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 09 0F 29 0A BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 12 0F 29 11 BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 81 C1 D0 01 00 00 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 19 0F 29 1A A1 ?0 ?? ?? 0? 83 C0 40 99 A3 ?0 ?? ?? 0? 89 15 ?4 ?? ?? 0? BA ?0 ?? ?? 0? 8B 0D ?0 A? ?? 0? 83 C1 70 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 22 0F 29 21 BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 29 0F 29 2A BA ?0 ?? ?? 0? 8B 0D ?0 ?? ?? 0? 83 E1 F0 89 C8 C1 E8 0C 8B 04 85 30 ?0 ?? ?? BB ?? ?? ?? 30 01 C1 0F 88 ?? ?? ?? D? 0F 28 32 0F 29 31", nil, AczFreecamHangar_pcsx2_id_ram_start[2] + 0x10000000, AczFreecamHangar_pcsx2_id_ram_start[2] + 0x20000000, "", 0, "", true, nil, nil, nil)
							
							if #temp ~= 0 then
								
								acz_hangar_aob_address_list[#acz_hangar_aob_address_list + 1] = temp[1] + 0x5D
								acz_hangar_aob_address_list[#acz_hangar_aob_address_list + 1] = temp[1] + 0x12E
								
								IsAczFreecamHangarEnabled = true
								
								if (readByte(tbl[1] + 0x1875) == 1 or readByte(tbl[1] + 0x1876) == 1 or readByte(tbl[1] + 0x1877) == 1) then
								
									local temp = memscan_func(soExactValue, vtByteArray, nil, "88 11 C7 05 ?8 A? ?? 0? A4 C6 13 00 A1 ?0 A? ?? 0? 83 C0 03 A3 ?0 A? ?? 0? 2B 05 ?? ?? ?? 0? 0F 88 ?? ?? ?? ?? E9 ?? ?? ?? D? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?0 ?? ?? 0? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 0? ?? 0? ?? ?? ?? ?? ?? ?? ?? ?? ?? 5? 0? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?0 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 0? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ??", nil, AczFreecamHangar_pcsx2_id_ram_start[2] + 0x10000000, AczFreecamHangar_pcsx2_id_ram_start[2] + 0x20000000, "", 0, "", true, nil, nil, nil)
								
									if #temp ~= 0 then
										
										for i = 1, #temp do
									
											acz_hangar_aob_lod_data_list[#acz_hangar_aob_lod_data_list + 1] = temp[i]
										
										end
									
										IsAczHangarLodEnabled = true
								
									else
										
										aczhangar_errorMessage = "<< ERROR: LoD settings are not available. >>"
									
									end
								
								else
									
									aczhangar_errorMessage = "<< ERROR: no SpW or wingman detected. >>"
								
								end
							
								unpause(getOpenedProcessID())
							
							else
								
								if #temp == 0 or next(temp) == nil then
									
									showMessage("<< Unable to activate this script (acz_hangar_search_aob returned nil). >>")
									unpause(getOpenedProcessID())
								
								elseif #temp > 1 then
									
									showMessage("<< Unable to activate this script (acz_hangar_search_aob returned more than a result). >>")
									unpause(getOpenedProcessID())
								
								end
							
							end
						
						end
						
					else
						
						showMessage("<< Unable to activate this script (memscan_func returned nil). >>")
						
					end
				
				else
					
					showMessage("<< Enter a hangar before activating this script. >>")
					
				end
				
			else
				
				showMessage("<< Disable the [QUICK SELECTION] setting in ACZ's options menu before activating this script. >>")
				
			end
			
		else
			
			showMessage("<< This script is not compatible with the game you're currently emulating. >>")
			
		end
		
	else
		
		if AczFreecamHangar_pcsx2_id_ram_start[3] == 1 then
			
			showMessage("<< Attach this table to a running instance of PCSX2 first. >>")
			
		elseif AczFreecamHangar_pcsx2_id_ram_start[3] == 2 then
			
			showMessage("<< Multiple instances of PCSX2 were detected. Only one is needed. >>")
			
		elseif AczFreecamHangar_pcsx2_id_ram_start[3] == 3 then
			
			showMessage("<< PCSX2 has no ISO file loaded. >>")
			
		end
		
	end

else
	
	showMessage("<< ERROR: This script will not work while the [GAMEPLAY] script is active. >>")

end

----------------+
---- [MAIN] ----+
----------------+

if IsAczFreecamHangarEnabled then
	
	-- Disable HUD
	acz_hangar_freecam_address_list[#acz_hangar_freecam_address_list + 1] = AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F7E8C
	acz_hangar_freecam_data_list[#acz_hangar_freecam_data_list + 1] = readBytes(AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F7E8C, 1, true)
	writeBytes(AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F7E8C, 0x01)
	
	-- No idea of what is this, but seems to be related to the HUD and it removes a semitransparent yellow band that appears
	-- at the top of the screen when the HUD graphics are modified in the previous line of code.
	writeBytes(AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F7EB0, 0x00, 0x00, 0x00, 0x00)
	
	---- Disable the gamepad input.
	acz_hangar_freecam_address_list[#acz_hangar_freecam_address_list + 1] = AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F70B8
	acz_hangar_freecam_data_list[#acz_hangar_freecam_data_list + 1] = readBytes(AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F70B8, 4, true)
	writeBytes(AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F70B8, 0x00, 0x00, 0x00, 0x00)
	
	-- Disable camera movement opcodes
	
	for i = 1, #acz_hangar_aob_address_list do
		
		writeBytes(acz_hangar_aob_address_list[i], 0x90, 0x90, 0x90)
	
	end
	
	-- Create the script's main header
	acz_hangar_freecam_main_header = create_header("[CAMERA] HANGAR FREECAM", nil, nil)
	
	-- //[CAMERA X/Z/Y/P/Y/R COORDINATES]//
	-- Create a header and memory records to display the camera's current XYZ coordinates.
	-- Store the camera's last XYZ coordinates previous to script activation and restore them back once the script is deactivated.
	
	local camera_coordinates_header = create_header("Current camera coordinates", acz_hangar_freecam_main_header, true)
	local camera_coordinates_base_address = tbl[1] + 0x30
	local offset_list = {0x0, 0x4, 0x8, 0x10, 0x14, 0x18}
	local description_list = {"X coordinate", "Z coordinate", "Y coordinate", "Pitch", "Yaw", "Roll"}
	
	for i = 1, #offset_list do
		
		create_memory_record(camera_coordinates_base_address, {offset_list[i]}, {vtSingle}, {description_list[i]}, camera_coordinates_header)
		
	end
	
	acz_hangar_freecam_address_list[#acz_hangar_freecam_address_list + 1] = camera_coordinates_base_address
	acz_hangar_freecam_data_list[#acz_hangar_freecam_data_list + 1] = (readBytes(camera_coordinates_base_address, 28, true))
	
	-- //[PLAYER/WINGMAN PLACEMENT IN HANGAR]//
	--- Create a header and memory records for every PLAYER/WINGMAN coordinate set available for each hangar.
	--- Store last coordinate values to restore them on script deactivation.
	
	local placement_in_hangar_main_header = create_header("Position in hangar", acz_hangar_freecam_main_header, true)
	local entity_placement_coordinates_base_address = tbl[2]
	local offset_list = {0x0, 0x4, 0x50, 0x54, 0xA0, 0xA4, 0xF0, 0xF4}
	local header_list = {"VALAIS coordinate set (ID 0)", "HEIERLARK coordinate set (ID 1)", "KIRWIN ISLAND coordinate set (ID 2)", "VALAIS SP coordinate set (ID 3)"}
	local o = 1
	
	for i = 1, #header_list do
		
		local hangar_placement_header = create_header(header_list[i], placement_in_hangar_main_header, true)
		create_memory_record(entity_placement_coordinates_base_address, {offset_list[o]}, {vtSingle}, {"WINGMAN position in hangar"}, hangar_placement_header)
		o = o + 1
		create_memory_record(entity_placement_coordinates_base_address, {offset_list[o]}, {vtSingle}, {"PLAYER position in hangar"}, hangar_placement_header)
		o = o + 1
		
	end
	
	acz_hangar_freecam_address_list[#acz_hangar_freecam_address_list + 1] = entity_placement_coordinates_base_address
	acz_hangar_freecam_data_list[#acz_hangar_freecam_data_list + 1] = readBytes(entity_placement_coordinates_base_address, 320, true)
	
	-- //[HANGAR PLACEMENT TYPE VALUE ID]//
	--- Create a header and memory records to display the current hangar coordinate set ID value and the rotation value if said ID is 3.
	--- Store current hangar coordinate set and rotation value for ID 3.
	
	local placement_type_base_address = tbl[1] + 0x1826
	
	create_memory_record(placement_type_base_address, {0x0}, {vtByte}, {"Current coordinate set ID"}, placement_in_hangar_main_header)
	
	acz_hangar_freecam_address_list[#acz_hangar_freecam_address_list + 1] = placement_type_base_address
	acz_hangar_freecam_data_list[#acz_hangar_freecam_data_list + 1] = readBytes(placement_type_base_address, 1, true)
	
	create_memory_record(AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F7A54, {0x0}, {vtSingle}, {"Aircraft rotation value (coordinate set ID 3 only)"}, placement_in_hangar_main_header)
	
	acz_hangar_freecam_address_list[#acz_hangar_freecam_address_list + 1] = AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F7A54
	acz_hangar_freecam_data_list[#acz_hangar_freecam_data_list + 1] = readBytes(AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F7A54, 4, true)
	
	-- //[AIRCRAFT ANIMATION FLAG]//
	-- Create a header and a memory record to display the current animation flag value for the player's plane.
	-- Store its current value for restoration later.
	
	local hangar_aircraft_anim_flag_main_header = create_header("Aircraft animation flags", acz_hangar_freecam_main_header, true)
	create_memory_record(tbl[1] + 0xA04, {0x0}, {vtByte}, {"Player"}, hangar_aircraft_anim_flag_main_header)
	
	 -- //[Level of Detail]//
	 -- If the wingman is also in the hangar then create a header and memory records to display the wingman and its SpW's model LoD values.
	 -- Create a header and a memory record for the wingman's aircraft animation flag.
	 -- Assign created memory records to their respective headers.
	 
	if IsAczHangarLodEnabled then
		
		for i = 1, #acz_hangar_aob_lod_data_list do
		
			writeBytes(acz_hangar_aob_lod_data_list[i], 0x90, 0x90)
		
		end
		
		local hangar_lod_flag_main_header = create_header("Level of Detail", acz_hangar_freecam_main_header, true)
		
		-- //[WINGMAN SETTINGS]//
		-- Check if there's a wingman present in the hangar.
		
		if readByte(tbl[1] + 0x1875) == 1 then -- Player's SpW is present
			
			-- Create a memory record for for Player's SpW LoD flag
			create_memory_record(tbl[1] + 0x1821, {0x0}, {vtByte}, {"Player's SpW"}, hangar_lod_flag_main_header)
			
			-- Change Player's SpW 3D model to the high quality one
			writeBytes(tbl[1] + 0x1821, 1)
		
		end
		
		if readByte(tbl[1] + 0x1876) == 1 then -- Wingman's aircraft is present
			
			-- Create a memory record for the wingman's aircraft LoD flag
			create_memory_record(tbl[1] + 0x1822, {0x0}, {vtByte}, {"Wingman's aircraft"}, hangar_lod_flag_main_header)
			
			-- Create memory record for wingman's animation flag when it's using its high poly model
			create_memory_record(tbl[1] + 0x1344, {0x0}, {vtByte}, {"Wingman"}, hangar_aircraft_anim_flag_main_header)
			
			-- Toggle wingman's aircraft animation to "closed"
			writeBytes(tbl[1] + 0x1344, 1)
			
			-- Change wingman's 3D model to the high quality one
			writeBytes(tbl[1] + 0x1822, 1)
		
		end
		
		if readByte(tbl[1] + 0x1877) == 1 then -- Wingman's SpW is present
			
			-- Create a memory record for for wingman's SpW LoD flag
			create_memory_record(tbl[1] + 0x1823, {0x0}, {vtByte}, {"Wingman's SpW"}, hangar_lod_flag_main_header)
			
			-- Change wingman's SpW 3D model to the high quality one
			writeBytes(tbl[1] + 0x1823, 1)
		
		end
		
	else
		
		create_header(aczhangar_errorMessage, acz_hangar_freecam_main_header, nil)
		
	end
	
	-- //[HANGAR GROUND REFLECTION EFFECT]//
	-- Create header and memory record for the ground reflection effect flag.
	-- Store its current value to restore it on script deactivation.
	
	local ground_reflection_effect_flag_base_address = tbl[2] + 0x11D
	local ground_reflection_effect_flag_header = create_header("Ground reflection effect", acz_hangar_freecam_main_header, true)
	
	create_memory_record(ground_reflection_effect_flag_base_address, {0x0}, {vtByte}, {"It is enabled?"}, ground_reflection_effect_flag_header)
	
	acz_hangar_freecam_address_list[#acz_hangar_freecam_address_list + 1] = ground_reflection_effect_flag_base_address
	acz_hangar_freecam_data_list[#acz_hangar_freecam_data_list + 1] = readBytes(ground_reflection_effect_flag_base_address, 1, true)
	
	-- //[HOTKEYS]//
	-- Set camera XYZ and PYR (Pitch-Yaw-Roll) base movement speeds.
	-- Set action/movement hotkeys function.
	-- Create and enable timer on script activation.
	
	-- Set camera XYZ/PYR base speed.
	local camera_base_speed = 1.0
	local camera_pyr_base_speed = 0.098175
	
	-- Camera's control keys.
	local function checkKeys(timer)
		
		-- Check if PCSX2 is up and running. if not, disable script.
	
		if readInteger(AczFreecamHangar_pcsx2_id_ram_start[2]) ~= nil then
		
			if (isKeyPressed(VK_A)) then  -- Move left
				writeFloat(acz_hangar_freecam_address_list[3], readFloat(acz_hangar_freecam_address_list[3]) - camera_base_speed)
			elseif (isKeyPressed(VK_D)) then -- Move right
				writeFloat(acz_hangar_freecam_address_list[3], readFloat(acz_hangar_freecam_address_list[3]) + camera_base_speed)
			elseif (isKeyPressed(VK_Q)) then -- Move down
				writeFloat(acz_hangar_freecam_address_list[3] + 0x4, readFloat(acz_hangar_freecam_address_list[3] + 0x4) - camera_base_speed)
			elseif (isKeyPressed(VK_E)) then -- Move up
				writeFloat(acz_hangar_freecam_address_list[3] + 0x4, readFloat(acz_hangar_freecam_address_list[3] + 0x4) + camera_base_speed)
			elseif (isKeyPressed(VK_S)) then -- Move backwards
				writeFloat(acz_hangar_freecam_address_list[3] + 0x8, readFloat(acz_hangar_freecam_address_list[3] + 0x8) + camera_base_speed)
			elseif (isKeyPressed(VK_W)) then -- Move forwards
				writeFloat(acz_hangar_freecam_address_list[3] + 0x8, readFloat(acz_hangar_freecam_address_list[3] + 0x8) - camera_base_speed)
			elseif (isKeyPressed(VK_NUMPAD2)) then -- Pitch up
				writeFloat(acz_hangar_freecam_address_list[3] + 0x10, readFloat(acz_hangar_freecam_address_list[3] + 0x10) - camera_pyr_base_speed)
			elseif (isKeyPressed(VK_NUMPAD5)) then -- Pitch down
				writeFloat(acz_hangar_freecam_address_list[3] + 0x10, readFloat(acz_hangar_freecam_address_list[3] + 0x10) + camera_pyr_base_speed)
			elseif (isKeyPressed(VK_NUMPAD3)) then -- Yaw left
				writeFloat(acz_hangar_freecam_address_list[3] + 0x14, readFloat(acz_hangar_freecam_address_list[3] + 0x14) - camera_pyr_base_speed)
			elseif (isKeyPressed(VK_NUMPAD1)) then -- Yaw right
				writeFloat(acz_hangar_freecam_address_list[3] + 0x14, readFloat(acz_hangar_freecam_address_list[3] + 0x14) + camera_pyr_base_speed)
			elseif (isKeyPressed(VK_NUMPAD6)) then -- Roll left
				writeFloat(acz_hangar_freecam_address_list[3] + 0x18, readFloat(acz_hangar_freecam_address_list[3] + 0x18) - camera_pyr_base_speed)
			elseif (isKeyPressed(VK_NUMPAD4)) then -- Roll right
				writeFloat(acz_hangar_freecam_address_list[3] + 0x18, readFloat(acz_hangar_freecam_address_list[3] + 0x18) + camera_pyr_base_speed)
			elseif (isKeyPressed(VK_ADD)) then -- Increase camera XYZ speed
				camera_base_speed = camera_base_speed + 1
			elseif (isKeyPressed(VK_SUBTRACT)) then -- Decrease camera XYZ speed
				camera_base_speed = camera_base_speed - 1
			elseif (isKeyPressed(VK_NUMPAD7)) then -- Reset XZY coordinates
				restore(acz_hangar_freecam_address_list, acz_hangar_freecam_data_list, true, nil, nil, nil)
			elseif (isKeyPressed(VK_NUMPAD8)) then -- Reset PYR coordinates
				restore(acz_hangar_freecam_address_list, acz_hangar_freecam_data_list, nil, true, nil, nil)
			elseif (isKeyPressed(VK_NUMPAD9)) then -- Reset hangar placement
				restore(acz_hangar_freecam_address_list, acz_hangar_freecam_data_list, nil, nil, true, nil)
			elseif (isKeyPressed(VK_SPACE)) then -- Panic key
				camera_base_speed = 1
				restore(acz_hangar_freecam_address_list, acz_hangar_freecam_data_list, true, true, true, nil)
			elseif (camera_base_speed < 1.0) then -- Reset camera speed value if it goes below 1.0
				camera_base_speed = 1.0
			end
		
		else
		
		-- Self disable script.
		getAddressList().getMemoryRecordByDescription("Hangar").Active = false
	
		end
		
		return
		
	end
	
	AczFreecamHangar_hotkey_Timer = createTimer(nil, true) -- Create timer object
	AczFreecamHangar_hotkey_Timer.Interval = 50 -- Set tick rate
	AczFreecamHangar_hotkey_Timer.onTimer = checkKeys -- Call this function every Nms value set in the ".Interval" parameter.
	AczFreecamHangar_hotkey_Timer.Enabled = true -- Enable the timer object.
	
end

[DISABLE]

if syntaxcheck then return end

-- On deactivation, if the script activation was successful then:
---- Destroy hotkey timer
---- Restore modified values
---- Restored modified camera code
---- Clear tables
---- Exit script
-- Otherwise just exit the script.

if IsAczFreecamHangarEnabled then
	
	AczFreecamHangar_hotkey_Timer.destroy()
	AczFreecamHangar_hotkey_Timer = nil
	
	acz_hangar_freecam_main_header.destroy()
	
	if AczFreecamHangar_pcsx2_id_ram_start[1] == 2 then
		
		for i = 1, #acz_hangar_aob_address_list do
			
			writeBytes(acz_hangar_aob_address_list[i], 0x0F, 0x29, 0x09)
		
		end
	
	else
		
		writeBytes(acz_hangar_aob_address_list[1], 0x0F, 0x29, 0x11)
		writeBytes(acz_hangar_aob_address_list[2], 0x0F, 0x29, 0x31)
	
	end
		
	if IsAczHangarLodEnabled then
		
		for i = 1, #acz_hangar_aob_lod_data_list do
	
			writeBytes(acz_hangar_aob_lod_data_list[i], 0x88, 0x11)
		
		end
		
		IsAczHangarLodEnabled = nil
	
	end
	
	writeBytes(AczFreecamHangar_pcsx2_id_ram_start[2] + 0x3F7EB0, 0x00, 0x00, 0x00, 0x43) -- Restore some HUD stuff value
	
	restore(acz_hangar_freecam_address_list, acz_hangar_freecam_data_list, true, true, true, true)
	
	acz_hangar_freecam_address_list  = nil
	acz_hangar_freecam_data_list = nil
	AczFreecamHangar_pcsx2_id_ram_start = nil
	
	IsAczFreecamHangarEnabled = nil
	
end